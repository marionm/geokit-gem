require 'test/unit'
require 'rubygems'
require 'lib/geokit'

# TODO: Better and more tests would be nice
class PolygonalMethodsTest < Test::Unit::TestCase
  def setup
    #Points generated by http://www.geocodezip.com/map-markers_ConvexHull_Polygon.asp
    @locations = [
      [37.461371,-122.154351],
      [37.458874,-122.131191],
      [37.455747,-122.126103],
      [37.422689,-122.107946],
      [37.435285,-122.132227],
      [37.423376,-122.139946],
      [37.422976,-122.146517],
      [37.439795,-122.151437],
      [37.441023,-122.181853],
      [37.452271,-122.180637]
    ].map { |coords| Geokit::LatLng.new(*coords) }
  end

  def test_contrived_polygon_example
    polygon = Geokit::LatLng.polygon(@locations.shuffle)
    assert_equal @locations, polygon
  end

  def test_contrived_convex_hull_example
    expected = [
      @locations[0], @locations[1], @locations[2],
      @locations[3], @locations[6], @locations[8],
      @locations[9]
    ]
    hull = Geokit::LatLng.convex_hull(@locations.shuffle)
    assert_equal expected, hull
  end
end

class TestPolygonClockwise < Test::Unit::TestCase
  def setup

  end

  def test_clockwise_with_western_start
    
  end

  def test_clockwise_with_eastern_start

  end

  def test_clockwise_with_straight_north_start

  end

  def test_clockwise_with_straight_south_start

  end
end

class TestMidpointOf < Test::Unit::TestCase

end

class TestCentroid < Test::Unit::TestCase

end

class TestArea < Test::Unit::TestCase

end
