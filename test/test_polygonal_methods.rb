require 'test/unit'
require 'rubygems'
require 'lib/geokit'

# TODO: Better and more tests would be nice
class PolygonalMethodsTest < Test::Unit::TestCase
  def setup
    #Points generated by http://www.geocodezip.com/map-markers_ConvexHull_Polygon.asp
    @locations = [
      [37.461371,-122.154351],
      [37.458874,-122.131191],
      [37.455747,-122.126103],
      [37.422689,-122.107946],
      [37.435285,-122.132227],
      [37.423376,-122.139946],
      [37.422976,-122.146517],
      [37.439795,-122.151437],
      [37.441023,-122.181853],
      [37.452271,-122.180637]
    ].map { |coords| Geokit::LatLng.new(*coords) }
  end

  def test_contrived_polygon_example
    polygon = Geokit::LatLng.polygon(@locations.shuffle)
    assert_equal @locations, polygon
  end

  def test_contrived_convex_hull_example
    expected = [
      @locations[0], @locations[1], @locations[2],
      @locations[3], @locations[6], @locations[8],
      @locations[9]
    ]
    hull = Geokit::LatLng.convex_hull(@locations.shuffle)
    assert_equal expected, hull
  end
end

class TestPolygonClockwise < Test::Unit::TestCase
  def test_clockwise
    [
      [[0, 0], [0, 1], [-1, -2]], [[0, 0], [0, 1], [-1, 0]], [[0, 0], [0, 1], [-1, 1]], [[0, 0], [0, 1], [-1, 2]],
      [[0, 0], [0, -1], [1, -2]], [[0, 0], [0, -1], [1, -1]], [[0, 0], [0, -1], [1, 0]], [[0, 0], [0, -1], [1, 1]],
      [[30, 54], [67, 54], [-20, 55]], [[40, 10], [10, 10], [30, 0]], [[40, 50], [60, 20], [64, 30]]
    ].each do |points|
      assert Geokit::LatLng.send(:clockwise?, *points.map { |p| Geokit::LatLng.new(*p) })
    end
  end

  def test_counter_clockwise
    [
      [[0, 0], [0, 1], [1, -2]], [[0, 0], [0, 1], [1, 0]], [[0, 0], [0, 1], [1, 1]], [[0, 0], [0, 1], [1, 2]],
      [[0, 0], [0, -1], [-1, -2]], [[0, 0], [0, -1], [-1, -1]], [[0, 0], [0, -1], [-1, 0]], [[0, 0], [0, -1], [-1, 1]],
      [[30, 54], [67, 54], [-20, 52]], [[40, 10], [10, 10], [30, 85]],
      [[40, 50], [60, 20], [60, 10]]
    ].each do |points|
      assert !Geokit::LatLng.send(:clockwise?, *points.map { |p| Geokit::LatLng.new(*p) })
    end
  end
end

class TestMidpointOf < Test::Unit::TestCase
  def test_something

  end
end

class TestCentroid < Test::Unit::TestCase
  def test_centroid

  end

  def test_triangle_centroid
    #TODO: Write some tests
  end
end

# TODO: Some better tests would be nice
class TestArea < Test::Unit::TestCase
  def test_greater_but_close_to_planar_approx
    a = [0, 0]
    b = [10, 0]
    c = [0, 10]

    approx = ((10 * Geokit::Mappable::MILES_PER_LATITUDE_DEGREE) ** 2) / 2
    actual = Geokit::LatLng.area a, b, c

    assert approx < actual
    assert_in_delta approx, actual, 1800
  end

  def test_misleading_headings
    #The heading difference between b to a and b to c is ~296, which is not the angle at b
    a = [5, 0]
    b = [-3, 0]
    c = [-2, -2]


    lat_miles = Geokit::Mappable::MILES_PER_LATITUDE_DEGREE
    approx = 8 * lat_miles * 2 * lat_miles / 2
    actual = Geokit::LatLng.area a, b, c

    assert approx < actual
    assert_in_delta approx, actual, 101
  end
end
